{"version":3,"file":"app.b546db88db31677e34b4.hot-update.js","mappings":";;;;;;;;;AAAA;;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;;AAIA;AAGA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAEA;AAjBA;AAqBA;AAEA;AAEA;AACA;AACA;AACA;AAHA;;AAMA;AAEA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAIA;AACA;AACA;AAEA;;AAEA;AAOA;;AAIA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;;AAEA;AACA;AACA;;AAEA;AAEA;AAEA;AAEA;AACA;AACA;;AAEA;AAMA;AACA;;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAPA;AAcA;AAEA;AAOA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AAEA;AAEA;;AAEA;AACA;AACA;;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;;;AAIA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AAGA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAIA;;AAEA;AAGA;AAEA;;AAEA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;;AAEA;AACA;AACA;;AA9XA;;AAkYA;;;;;;;;ACnYA","sources":["webpack://sage/./resources/scripts/util/map.js","webpack://sage/webpack/runtime/getFullHash"],"sourcesContent":["import $ from \"jquery\";\nclass Map {\n\n    constructor()\n    {\n\n        if ($('.section-map').length) {\n            console.log(\"---------------------------- section-map\");\n\n            let pointArray = [];\n            let markers = [];\n            let currentMarker\n\n          //console.log(\"---------------------------- Map\");\n\n            function getWindowSize()\n            {\n\n                if (document.body && document.body.offsetWidth) {\n                    self.winW = document.body.offsetWidth;\n                    self.winH = document.body.offsetHeight;\n                }\n                if (document.compatMode === 'CSS1Compat' && document.documentElement && document.documentElement.offsetWidth ) {\n                    self.winW = document.documentElement.offsetWidth;\n                    self.winH = document.documentElement.offsetHeight;\n                }\n                if (window.innerWidth && window.innerHeight) {\n                    self.winW = window.innerWidth;\n                    self.winH = window.innerHeight;\n                }\n\n                return {width : self.winW, height : self.winH};\n            }\n\n            function startMap()\n            {\n\n                var pointArray = [];\n                var markers = [];\n                var infoWindows = [];\n                var title = $('.map-info').data(\"title\")\n                var description = $('.map-info').data(\"description\")\n                var lat = $('.map-info').data(\"lat\")\n                var lon = $('.map-info').data(\"lon\")\n                var mapZoom = $('.map-info').data(\"zoom\")\n                var marker = $('.map-info').data(\"marker\")\n                var markerWidth = $('.map-info').data(\"marker-w\")\n                var markerHeight = $('.map-info').data(\"marker-h\")\n                var markerX = $('.map-info').data(\"marker-x\")\n                var markerY = $('.map-info').data(\"marker-y\")\n                var mapOptions;\n\n                console.log('markerWidth ' + markerWidth + \" markerHeight \" + markerHeight)\n\n              //console.log(lat, lon, mapZoom)\n\n                var MapPoints = new google.maps.LatLng(lat, lon);\n\n                mapOptions = {\n                    zoom: mapZoom,\n                    center: MapPoints,\n                    disableDefaultUI: true,\n                    panControl: false,\n                    zoomControl: true,\n                    zoomControlOptions: {\n                        style: google.maps.ZoomControlStyle.SMALL,\n                        position: google.maps.ControlPosition.RIGHT_BOTTOM\n                    },\n                    mapTypeControlOptions: {\n                        mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'blue']\n                    },\n                    scaleControl: false,\n                    //draggable: false,\n                    scrollwheel: false,\n\n                    styles: window.data.map_styles\n\n                };\n\n                let map = new google.maps.Map(document.getElementById('map'), mapOptions);\n\n                var markerBounds = new google.maps.LatLngBounds();\n\n                const icon = {\n                    url: window.data.map_marker,\n                    anchor: new google.maps.Point(5,8),\n                    scaledSize: new google.maps.Size(10,16),\n                }\n\n                function createTestMarker()\n                {\n                    const mainIcon = {\n                        //url: marker,\n                        //anchor: new google.maps.Point(0,0),\n                        //scaledSize: new google.maps.Size(52,60),\n                    }\n\n                    var myMarker = new google.maps.Marker({\n                        position: MapPoints,\n                        map: map,\n                        title: title,\n                        description: description,\n                        icon: mainIcon,\n                    });\n\n                }\n\n                function createMainMarker()\n                {\n\n                    const mainIcon = {\n                        url: marker,\n                        //anchor: new google.maps.Point(8,0),\n                        //scaledSize: new google.maps.Size(52,60),\n                        anchor: new google.maps.Point(markerX,markerY),\n                        scaledSize: new google.maps.Size(markerWidth,markerHeight),\n                    }\n\n                    var myMarker = new google.maps.Marker({\n                        position: MapPoints,\n                        map: map,\n                        title: title,\n                        description: description,\n                        icon: mainIcon,\n                    });\n\n                    let link\n\n                  ////console.log('add link ' + link);\n\n                  // if (m.ex_link) {\n                  //  link = '<a class=\"link\" href=\"'+ m.ex_link +'\" target=\"_blank\">Get directions  <i class=\"far fa-chevron-right\"></i></a>'\n                  // }\n\n                  //console.log('link ' + link)\n\n                    let contentString = '<div class=\"content\">' +\n                    '<h3>' + title + '</h3>' +\n                    '<div class=\"body-content\">' +\n                    '<div class=\"address\">' + description + '</div>' +\n                    '</div>' +\n                    '</div>';\n\n                    markerBounds.extend(MapPoints);\n\n                  //console.log('contentString ', contentString)\n\n                    myMarker.infoWindow = new google.maps.InfoWindow({\n                        content:  contentString,\n                        disableAutoPan : true\n                    });\n\n                    markers.push(myMarker);\n\n                    google.maps.event.addListener(myMarker, 'click', function () {\n\n                          currentMarker = myMarker\n\n                          map.panTo(myMarker.getPosition());\n\n                        for (var i = 0; i < markers.length; i++) {\n                            markers[i].infoWindow.close()\n                        }\n\n                        myMarker.infoWindow.open(map,myMarker);\n\n                    });\n\n                    google.maps.event.addListener(myMarker.infoWindow,'closeclick',function () {\n\n                          map.panTo(currentMarker.getPosition());\n                    });\n                }\n\n                createMainMarker();\n\n              //createTestMarker ();\n\n\n\n              //////////////////////////////////////////\n              //////////////////////////////////////////\n\n                function addMapMarker(m)\n                {\n\n                  //console.log(\"m \", m)\n\n                    var icon = {\n                      //path: google.maps.SymbolPath.CIRCLE,\n                        path: 'M-20,0a20,20 0 1,0 40,0a20,20 0 1,0 -40,0',\n                        fillColor: m.colour,\n                        fillOpacity: 1,\n                        strokeWeight: 0,\n                        scale: 0.6,\n                    }\n\n                    var myMarker = new google.maps.Marker({\n                        position: m.points,\n                        map: map,\n                        title: m.name,\n                        icon: icon,\n                        type: m.type,\n\n                        label: {\n                            text: m.label,\n                            color: 'white',\n                            weight:'bold'\n                        }\n                    });\n\n                    myMarker.setVisible(false)\n\n                    let contentString = '<div class=\"content\">' +\n                    '<h3>' + m.title + '</h3>' +\n                    '<div class=\"body-content\">' +\n                    '<div class=\"address\">' + m.description + '</div>' +\n                    '</div>' +\n                    '</div>';\n\n                    markerBounds.extend(m.points);\n\n                    myMarker.infoWindow = new google.maps.InfoWindow({\n                        content:  contentString,\n                        disableAutoPan : true\n                    });\n\n                    markers.push(myMarker);\n\n                    google.maps.event.addListener(myMarker, 'click', function () {\n\n                        currentMarker = myMarker\n\n                        map.panTo(myMarker.getPosition());\n\n                        for (let i = 0; i < markers.length; i++) {\n                            markers[i].infoWindow.close()\n                        }\n\n                        myMarker.infoWindow.open(map,myMarker);\n\n                    });\n\n                    google.maps.event.addListener(myMarker.infoWindow,'closeclick',function () {\n\n                        map.panTo(currentMarker.getPosition());\n\n                    });\n\n                }\n\n              //console.log(\"map\");\n\n                $(\".map-marker\").each(function (index) {\n\n                  //console.log(\"map link\");\n\n                    var p = {};\n\n                    p.lat = $(this).attr(\"data-lat\");\n                    p.lon = $(this).attr(\"data-lon\");\n                    p.title = $(this).attr(\"data-title\");\n                    p.description = $(this).attr(\"data-description\");\n                    p.colour = $(this).attr(\"data-colour\");\n                    p.label = $(this).attr(\"data-label\");\n                    p.type = $(this).attr(\"data-type\");\n\n                    pointArray.push(p);\n\n                });\n\n\n                if (pointArray.length > 0) {\n                    for (var i = 0; i < pointArray.length; i++) {\n                        var m = {};\n\n                    //console.log(\"label \" + i);\n\n                        m.points = new google.maps.LatLng(pointArray[i].lat, pointArray[i].lon);\n                        m.title = pointArray[i].title;\n                        m.description = pointArray[i].description;\n                        m.colour = pointArray[i].colour;\n                        m.label = pointArray[i].label;\n                        m.type = pointArray[i].type;\n                        m.lat = pointArray[i].lat;\n                        m.lon = pointArray[i].lon;\n\n                        addMapMarker(m);\n                    }\n                }\n\n              /*for (let i = 0; i < markers.length; i++) {\n\n                console.log('markers loop dining')\n\n                console.log('markers[i].type ', markers[i].type)\n\n\n\n                if (markers[i].type === 'dining') {\n\n                console.log('dining')\n\n                markers[i].setVisible(false);\n                }\n\n              }*/\n\n\n                $(\".marker-type\").click(function () {\n                  //alert( \"Handler for .click() called.\" );\n\n                    if ($(this).hasClass('markers-hidden')) {\n                        $(this).removeClass('markers-hidden')\n                    } else {\n                        $(this).addClass('markers-hidden')\n                    }\n\n                    let type = $(this).attr(\"data-type\");\n\n                    for (let i = 1; i < markers.length; i++) {\n                        if (markers[i].type === type) {\n                            if (markers[i].visible === true) {\n                                markers[i].setVisible(false);\n                            } else {\n                                markers[i].setVisible(true);\n                            }\n                        } else {\n                            markers[i].setVisible(false)\n                        }\n                    }\n\n                    let bounds = new google.maps.LatLngBounds();\n\n                    let visible = 0;\n\n                    for (let i = 0; i < markers.length; i++) {\n                        if (markers[i].visible === true) {\n                            bounds.extend(markers[i].position)\n\n                            visible++;\n                          //console.log(markers[i])\n                        }\n                    }\n\n                    if (visible > 1) {\n                        map.fitBounds(bounds);\n                    } else {\n                        map.setCenter(markers[0].position);\n                        map.setZoom(mapZoom);\n                    }\n\n\n            // set bounds\n                });\n\n\n\n            }\n\n            function runAPITimercheck()\n            {\n\n                console.log(\"runAPITimercheck\");\n\n                console.log(window.data.apiLoaded);\n\n                if (window.data.apiLoaded === true) {\n                    console.log('run map');\n\n                    startMap();\n\n                //run map\n                } else {\n                    console.log('check map API again');\n\n              // / setTimeout(runAPITimercheck, 500);\n                }\n\n            }\n\n            runAPITimercheck();\n        }\n    }\n\n}\n\nexport default Map\n","__webpack_require__.h = function() { return \"06cae5ba24c81e595e23\"; }"],"names":[],"sourceRoot":""}